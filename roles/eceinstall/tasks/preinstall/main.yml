---
- name: Include OS specific vars
  include_vars: "{{ item }}"
  with_first_found:
  - os_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}.yml
  - unsupported.yml

- name: Check that OS is supported
  fail:
    msg: "ERROR: OS {{ ansible_distribution }} {{ ansible_distribution_major_version}} is not supported!"
  when: unsupported_version is defined and unsupported_version

- name: Set docker_version based on ECE version
  set_fact:
    docker_version: "{{ '24.0' if ece_version is version('3.7.0', '>') else '20.10' }}"
  when: crt == "docker"

- name: Set podman_version if container runtime is podman
  set_fact:
    podman_version: "4"
  when: crt == "podman"

# - name: Set Docker version mapping based on architecture
#   set_fact:
#     docker_version_map: >
#       {{
#         {
#           "20.10": {
#             "name": "Docker-CE",
#             "package": [
#               "docker-ce-20.10.*",
#               "docker-ce-cli-20.10.*",
#               "containerd.io-1.5*"
#             ],
#             "repo": "https://download.docker.com/linux/centos/8/" + 
#                      (ansible_architecture | ternary('x86_64/stable', 'aarch64/stable')),
#             "keys": {
#               "server": "https://download.docker.com/linux/centos/gpg",
#               "id": "060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35"
#             }
#           }
#         }
#       }}
#   when: ansible_architecture in ['x86_64', 'aarch64']

- name: Update Docker version map with correct architecture
  set_fact:
    docker_version_map:
      "20.10":
        name: 'Docker-CE'
        package:
          - docker-ce-20.10.*
          - docker-ce-cli-20.10.*
          - containerd.io-1.5.*
        repo: "https://download.docker.com/linux/centos/8/{{ 'aarch64' if ansible_architecture == 'aarch64' else 'x86_64' }}/stable"
        keys:
          server: https://download.docker.com/linux/centos/gpg
          id: 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35
  when: ansible_os_family != "Debian"

- name: Assert docker version is supported
  assert:
    that: "docker_version in docker_version_map.keys()"
    msg: "Docker version must be one of {{ docker_version_map.keys() }}"
  when: 
    - crt == "docker"

- name: execute os specific tasks
  include_tasks: "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}/main.yml"

- include_tasks: general/dependencies.yml

- include_tasks: general/make_user.yml
- include_tasks: general/sysctl_scripts.yml
- include_tasks: general/set_limits.yml
##  tags: [setup_filesystem, destructive]
##  when: ansible_lvm['vgs']['lxc'] is not defined or force_xfc == true
- include_tasks: general/update_grub_docker.yml
##  tags: [setup_filesystem, destructive]
- include_tasks: general/configure_docker.yml
  when: crt == "docker"
- include_tasks: general/configure_podman.yml
  when: crt == "podman"
##  tags: [install_docker, destructive]
- include_tasks: ../direct-install/main.yml
- include_tasks: general/kernel_modules.yml

- name: skip automatic ephemeral mount
  copy:
    dest: /etc/cloud/cloud.cfg.d/01-mounts.cfg
    content: |
      mounts:
        - [ ephemeral0, null ]
