---
# - name: Install policycoreutils-python-utils 
#   yum:
#     name: 
#       - policycoreutils-python-utils
#     state: present
#     update_cache: yes

- name: Install policycoreutils-python-utils
  ansible.builtin.package:
    name:
      - policycoreutils-python-utils
    state: present
    update_cache: yes
  register: install_policycoreutils
  retries: 3
  delay: 10
  until: install_policycoreutils is succeeded
  ignore_errors: yes
  failed_when:
    - install_policycoreutils is failed
    - install_policycoreutils.rc is defined and install_policycoreutils.rc != 0

# - name: Install podman
#   package:
#     name: "{{ podman_version_map[podman_version]['package'] }}"
#     state: present
#   register: podman_installed
#   retries: 3
#   delay: 10
#   until: podman_installed is succeeded
#   ignore_errors: yes
#   failed_when: podman_installed is failed and podman_installed.rc != 0

- name: Install podman (asynchronously)
  ansible.builtin.package:
    name: "{{ podman_version_map[podman_version]['package'] }}"
    state: present
  async: 300  # Allow the task to run for up to 5 minutes
  poll: 0    # Check on the task's status every 15 seconds
  register: crt_installed

# - name: Lock Podman package versions with dnf_versionlock
#   community.general.dnf_versionlock:
#     name:
#       - podman-4.*
#       - podman-remote-4.*
#     state: present
#   register: lock_podman_versions
#   failed_when:
#     - lock_podman_versions is failed
#     - lock_podman_versions.rc is defined and lock_podman_versions.rc != 0

- name: Lock Podman package versions with dnf_versionlock
  community.general.dnf_versionlock:
    name: "{{ podman_version_map[podman_version]['package'] }}"
    state: present
  async: 300  # Allow the task to run for up to 5 minutes
  poll: 0    # Check on the task's status every 15 seconds
  register: lock_podman_versions
  failed_when:
    - lock_podman_versions is failed
    - lock_podman_versions.rc is defined and lock_podman_versions.rc != 0