--- 
- name: Add Docker repository
  yum_repository:
    name: "{{ docker_version_map[docker_version]['name'] }}"
    description: "Docker repository"
    file: docker-ce
    baseurl: "{{ docker_version_map[docker_version]['repo'] }}"
    enabled: yes
    gpgcheck: no
  register: repo_installed
  retries: 10
  delay: 5
  until: repo_installed is succeeded
  ignore_errors: yes
  failed_when: repo_installed is failed and repo_installed.rc != 0

# - name: Install Docker
#   package:
#     name: "{{ docker_version_map[docker_version]['package'] }}"
#     state: present
#   register: docker_installed
#   retries: 3
#   delay: 10
#   until: docker_installed is succeeded
#   ignore_errors: yes
#   failed_when: docker_installed is failed and docker_installed.rc != 0

- name: Install Docker (asynchronously)
  ansible.builtin.package:
    name: "{{ docker_version_map[docker_version]['package'] }}"
    state: present
  async: 300  # Allow the task to run for up to 5 minutes
  poll: 0    # Check on the task's status every 15 seconds
  register: crt_installed

# - name: Lock Docker package versions with dnf_versionlock
#   community.general.dnf_versionlock:
#     name:
#       - docker-ce-20.10.*
#       - docker-ce-cli-20.10.*
#       - containerd.io-1.5.*
#     state: present
#   register: lock_packages
#   failed_when: lock_packages is failed

- name: Lock docker package versions with dnf_versionlock
  community.general.dnf_versionlock:
    name: "{{ docker_version_map[docker_version]['package'] }}"
    state: present
  async: 300  # Allow the task to run for up to 5 minutes
  poll: 0    # Check on the task's status every 15 seconds
  register: lock_docker_versions
  failed_when:
    - lock_docker_versions is failed
    - lock_docker_versions.rc is defined and lock_docker_versions.rc != 0
